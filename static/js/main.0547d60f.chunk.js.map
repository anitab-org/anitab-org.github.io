{"version":3,"sources":["assets/logo.png","assets/contribute.png","Components/Header/index.js","Components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuItem","index","selected","setSelected","title","TouchableHighlight","style","styles","buttonContainer","underlayColor","onPress","accessible","accessibilityLabel","Text","borderBottomColor","borderBottomWidth","alignSelf","StyleSheet","create","logoContainer","flex","marginTop","marginLeft","Header","titles","View","flexDirection","width","backgroundColor","alignContent","Image","height","source","require","Content","alignItems","paddingTop","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,4HC2C3C,SAASC,EAASC,EAAOC,EAAUC,EAAaC,GAC9C,OACE,kBAACC,EAAA,EAAD,CACEC,MAAOC,EAAOC,gBACdC,cAAc,cACdC,QAAS,kBAAMP,EAAYF,IAC3BU,YAAY,EACZC,mBAAoBR,GAEpB,kBAACS,EAAA,EAAD,CACEP,MAAO,CACLQ,kBAAmBZ,IAAaD,EAAQ,aAAe,cACvDc,kBAAmB,EACnBC,UAAW,WAGZZ,IAMT,IAAMG,E,KAASU,EAAWC,OAAO,CAC/BC,cAAe,CACbC,KAAM,GAERZ,gBAAiB,CAAEa,UAAW,GAAIC,WAAY,MAGjCC,EA/Df,YAAoD,IAAlCrB,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,YAAaqB,EAAU,EAAVA,OACvC,OACE,kBAACC,EAAA,EAAD,CACEnB,MAAO,CACLc,KAAM,EACNM,cAAe,MACfC,MAAO,IACPC,gBAAiB,QACjBd,kBAAmB,UACnBC,kBAAmB,EACnBc,aAAc,WAGhB,kBAACxB,EAAA,EAAD,CACEC,MAAOC,EAAOY,cACdV,cAAc,cACdC,QAAS,kBAAMP,EAAY,IAC3BQ,YAAY,EACZC,mBAAoBY,EAAO,IAE3B,kBAACM,EAAA,EAAD,CACExB,MAAO,CAAEyB,OAAQ,GAAIJ,MAAO,KAC5BK,OAAQC,EAAQ,OAGnBjC,EAAS,EAAGE,EAAUC,EAAaqB,EAAO,IAC1CxB,EAAS,EAAGE,EAAUC,EAAaqB,EAAO,IAC1CxB,EAAS,EAAGE,EAAUC,EAAaqB,EAAO,IAC1CxB,EAAS,EAAGE,EAAUC,EAAaqB,EAAO,IAC1CxB,EAAS,EAAGE,EAAUC,EAAaqB,EAAO,MCXlCU,MAxBf,YAAwC,IAoBjB9B,EApBJF,EAAoB,EAApBA,SAAUsB,EAAU,EAAVA,OAC3B,OACE,kBAACC,EAAA,EAAD,CACEnB,MAAO,CACLqB,MAAO,IACPI,OAAQ,IACRI,WAAY,SACZC,WAAY,MAaGhC,EAVFoB,EAAOtB,GAWnB,kBAACW,EAAA,EAAD,KAAOT,IAVV,kBAAC0B,EAAA,EAAD,CACExB,MAAO,CAAEyB,OAAQ,IAAKJ,MAAO,KAC7BK,OAAQC,EAAQ,MAElB,kBAACpB,EAAA,EAAD,6BCKSwB,MAlBf,WAAgB,IAAD,EACmBC,mBAAS,GAD5B,mBACNpC,EADM,KACIC,EADJ,KAEPqB,EAAS,CACb,OACA,WACA,WACA,WACA,SACA,cAEF,OACE,kBAACC,EAAA,EAAD,CAAMnB,MAAO,CAAEc,KAAM,EAAGe,WAAY,WAClC,kBAAC,EAAD,CAAQjC,SAAUA,EAAUC,YAAaA,EAAaqB,OAAQA,IAC9D,kBAAC,EAAD,CAAStB,SAAUA,EAAUsB,OAAQA,MCNvBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0547d60f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.45cc4ce0.png\";","module.exports = __webpack_public_path__ + \"static/media/contribute.552c3589.png\";","import React from 'react';\nimport {\n  View,\n  Image,\n  Text,\n  TouchableHighlight,\n  StyleSheet,\n} from 'react-native';\n\nfunction Header({ selected, setSelected, titles }) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'row',\n        width: 800,\n        backgroundColor: 'white',\n        borderBottomColor: '#FF0000',\n        borderBottomWidth: 1,\n        alignContent: 'center',\n      }}\n    >\n      <TouchableHighlight\n        style={styles.logoContainer}\n        underlayColor=\"transparent\"\n        onPress={() => setSelected(0)}\n        accessible={true}\n        accessibilityLabel={titles[0]}\n      >\n        <Image\n          style={{ height: 50, width: 100 }}\n          source={require('./../../assets/logo.png')}\n        />\n      </TouchableHighlight>\n      {MenuItem(1, selected, setSelected, titles[1])}\n      {MenuItem(2, selected, setSelected, titles[2])}\n      {MenuItem(3, selected, setSelected, titles[3])}\n      {MenuItem(4, selected, setSelected, titles[4])}\n      {MenuItem(5, selected, setSelected, titles[5])}\n    </View>\n  );\n}\n\nfunction MenuItem(index, selected, setSelected, title) {\n  return (\n    <TouchableHighlight\n      style={styles.buttonContainer}\n      underlayColor=\"transparent\"\n      onPress={() => setSelected(index)}\n      accessible={true}\n      accessibilityLabel={title}\n    >\n      <Text\n        style={{\n          borderBottomColor: selected === index ? 'powderblue' : 'transparent',\n          borderBottomWidth: 2,\n          alignSelf: 'center',\n        }}\n      >\n        {title}\n      </Text>\n    </TouchableHighlight>\n  );\n}\n\nconst styles = StyleSheet.create({\n  logoContainer: {\n    flex: 1,\n  },\n  buttonContainer: { marginTop: 25, marginLeft: 40 },\n});\n\nexport default Header;\n","import React from 'react';\nimport { View, Text, Image } from 'react-native';\n\nfunction Content({ selected, titles }) {\n  return (\n    <View\n      style={{\n        width: 800,\n        height: 600,\n        alignItems: 'center',\n        paddingTop: 40,\n      }}\n    >\n      {renderContent(titles[selected])}\n      <Image\n        style={{ height: 200, width: 200 }}\n        source={require('./../../assets/contribute.png')}\n      />\n      <Text>UNDER CONSTRUCTION</Text>\n    </View>\n  );\n}\n\nfunction renderContent(title) {\n  return <Text>{title}</Text>;\n}\n\nexport default Content;\n","import React, { useState } from 'react';\nimport { View } from 'react-native';\nimport Header from './Components/Header';\nimport Content from './Components/Content';\n\nfunction App() {\n  const [selected, setSelected] = useState(0);\n  const titles = [\n    'HOME',\n    'ABOUT US',\n    'PROGRAMS',\n    'PROJECTS',\n    'EVENTS',\n    'CONTRIBUTE',\n  ];\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Header selected={selected} setSelected={setSelected} titles={titles} />\n      <Content selected={selected} titles={titles} />\n    </View>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}